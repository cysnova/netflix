{"ast":null,"code":"const ListReducer = (state, action) => {\n  switch (action.type) {\n    case \"GET_LISTS_START\":\n      return {\n        lists: [],\n        isFetching: true,\n        error: false\n      };\n    case \"GET_LISTS_SUCCESS\":\n      return {\n        lists: action.payload,\n        isFetching: false,\n        error: false\n      };\n    case \"GET_LISTS_FAILURE\":\n      return {\n        lists: [],\n        isFetching: false,\n        error: true\n      };\n    // case \"CREATE_LIST_START\":\n    //     return {\n    //         ...state,\n    //         isFetching: true,\n    //         error: false,\n    //     };\n    // case \"CREATE_LIST_SUCCESS\":\n    //     return {\n    //         lists: [...state.lists, action.payload],\n    //         isFetching: false,\n    //         error: false,\n    //     };\n    // case \"CREATE_LIST_FAILURE\":\n    //     return {\n    //         ...state,\n    //         isFetching: false,\n    //         error: true,\n    //     };\n    // case \"UPLOAD_LIST_START\":\n    //     return {\n    //         ...state,\n    //         isFetching: true,\n    //         error: false,\n    //     };\n    // case \"UPLOAD_LIST_SUCCESS\":\n    //     return {\n    //         lists: state.lists.map(\n    //             (list) => list._id === action.payload._id && action.payload\n    //         ),\n    //         isFetching: false,\n    //         error: false,\n    //     };\n    // case \"UPLOAD_LIST_FAILURE\":\n    //     return {\n    //         ...state,\n    //         isFetching: false,\n    //         error: true,\n    //     };\n    // case \"DELETE_LIST_START\":\n    //     return {\n    //         ...state,\n    //         isFetching: true,\n    //         error: false,\n    //     };\n    // case \"DELETE_LIST_SUCCESS\":\n    //     return {\n    //         lists: state.lists.filter((list) => list._id !== action.payload),\n    //         isFetching: false,\n    //         error: false,\n    //     };\n    // case \"DELETE_LIST_FAILURE\":\n    //     return {\n    //         ...state,\n    //         isFetching: false,\n    //         error: true,\n    //     };\n    // default:\n    //     return { ...state };\n  }\n};\n_c = ListReducer;\nexport default ListReducer;\nvar _c;\n$RefreshReg$(_c, \"ListReducer\");","map":{"version":3,"names":["ListReducer","state","action","type","lists","isFetching","error","payload","_c","$RefreshReg$"],"sources":["/Users/nova/Desktop/MERN-netflix/admin/src/context/listContext/ListReducer.js"],"sourcesContent":["const ListReducer = (state, action) => {\n    switch (action.type) {\n        case \"GET_LISTS_START\":\n            return {\n                lists: [],\n                isFetching: true,\n                error: false,\n            };\n        case \"GET_LISTS_SUCCESS\":\n            return {\n                lists: action.payload,\n                isFetching: false,\n                error: false,\n            };\n        case \"GET_LISTS_FAILURE\":\n            return {\n                lists: [],\n                isFetching: false,\n                error: true,\n            };\n        // case \"CREATE_LIST_START\":\n        //     return {\n        //         ...state,\n        //         isFetching: true,\n        //         error: false,\n        //     };\n        // case \"CREATE_LIST_SUCCESS\":\n        //     return {\n        //         lists: [...state.lists, action.payload],\n        //         isFetching: false,\n        //         error: false,\n        //     };\n        // case \"CREATE_LIST_FAILURE\":\n        //     return {\n        //         ...state,\n        //         isFetching: false,\n        //         error: true,\n        //     };\n        // case \"UPLOAD_LIST_START\":\n        //     return {\n        //         ...state,\n        //         isFetching: true,\n        //         error: false,\n        //     };\n        // case \"UPLOAD_LIST_SUCCESS\":\n        //     return {\n        //         lists: state.lists.map(\n        //             (list) => list._id === action.payload._id && action.payload\n        //         ),\n        //         isFetching: false,\n        //         error: false,\n        //     };\n        // case \"UPLOAD_LIST_FAILURE\":\n        //     return {\n        //         ...state,\n        //         isFetching: false,\n        //         error: true,\n        //     };\n        // case \"DELETE_LIST_START\":\n        //     return {\n        //         ...state,\n        //         isFetching: true,\n        //         error: false,\n        //     };\n        // case \"DELETE_LIST_SUCCESS\":\n        //     return {\n        //         lists: state.lists.filter((list) => list._id !== action.payload),\n        //         isFetching: false,\n        //         error: false,\n        //     };\n        // case \"DELETE_LIST_FAILURE\":\n        //     return {\n        //         ...state,\n        //         isFetching: false,\n        //         error: true,\n        //     };\n        // default:\n        //     return { ...state };\n    }\n};\n\nexport default ListReducer;"],"mappings":"AAAA,MAAMA,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EACnC,QAAQA,MAAM,CAACC,IAAI;IACf,KAAK,iBAAiB;MAClB,OAAO;QACHC,KAAK,EAAE,EAAE;QACTC,UAAU,EAAE,IAAI;QAChBC,KAAK,EAAE;MACX,CAAC;IACL,KAAK,mBAAmB;MACpB,OAAO;QACHF,KAAK,EAAEF,MAAM,CAACK,OAAO;QACrBF,UAAU,EAAE,KAAK;QACjBC,KAAK,EAAE;MACX,CAAC;IACL,KAAK,mBAAmB;MACpB,OAAO;QACHF,KAAK,EAAE,EAAE;QACTC,UAAU,EAAE,KAAK;QACjBC,KAAK,EAAE;MACX,CAAC;IACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ;AACJ,CAAC;AAACE,EAAA,GA/EIR,WAAW;AAiFjB,eAAeA,WAAW;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}